# -*- coding: utf-8 -*-
"""Full Code .ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/18lRusT7pRgG2B95eN5oRr05imiq547aQ
"""

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
import pandas as pd
# %matplotlib inline
from sklearn.preprocessing import LabelEncoder
from sklearn.model_selection import train_test_split
import warnings
warnings.filterwarnings('ignore')
from sklearn.model_selection import StratifiedKFold
kFold = StratifiedKFold(n_splits=5)
from sklearn.model_selection import GridSearchCV
from sklearn.preprocessing import StandardScaler
from  sklearn.metrics  import  accuracy_score , precision_score , recall_score,confusion_matrix,classification_report

"""# Data Exploration and Cleaning"""

df = pd.read_csv("Real Estate Data V21.csv")

import re

def clean_price(price_str):
    price_str = price_str.replace('‚Çπ', '').replace(',', '').strip()
    match = re.match(r'([\d\.]+)\s*([A-Za-z]+)', price_str)
    if match:
        value = float(match.group(1))
        unit = match.group(2).lower()
        if unit == 'cr':
            return value * 1e7
        elif unit == 'l':
            return value * 1e5
    else:
        try:
            return float(price_str)
        except:
            return None

df['Price_Cleaned'] = df['Price'].apply(clean_price)



from sklearn.preprocessing import LabelEncoder

le = LabelEncoder()
df['Location_Encoded'] = le.fit_transform(df['Location'])
df['Balcony_Encoded'] = le.fit_transform(df['Balcony'])
# app.py
import streamlit as st
import numpy as np
import joblib

# Load model and encoders
scaler = joblib.load("scaler.pkl")
le_loc = joblib.load("location_encoder.pkl")
le_bal = joblib.load("balcony_encoder.pkl")

st.title("üè† House Rent Price Predictor")

# User inputs
area = st.number_input("Total Area (sqft)", 100, 20000, 1000)
baths = st.selectbox("Number of Bathrooms", [1,2,3,4,5,6])
price_per_sqft = st.number_input("Price per Sqft", 100.0, 100000.0, 5000.0)

location = st.selectbox("Location", le_loc.classes_)
balcony = st.selectbox("Balcony", le_bal.classes_)

if st.button("Predict Rent Price"):
    loc_encoded = le_loc.transform([location])[0]
    bal_encoded = le_bal.transform([balcony])[0]
    area_per_bath = area / (baths + 1)

    X = np.array([[area, baths, price_per_sqft, loc_encoded, bal_encoded, area_per_bath]])
    X_scaled = scaler.transform(X)

    predicted_price = model.predict(X_scaled)[0]
    st.success(f"üè∑Ô∏è Predicted Rent Price: ‚Çπ {predicted_price:,.0f}")
